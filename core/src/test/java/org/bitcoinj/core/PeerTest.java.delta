diff --git a/core/src/test/java/org/bitcoinj/core/PeerTest.java b/core/src/test/java/org/bitcoinj/core/PeerTest.java
index dce7e991f..13a94a5ca 100644
--- a/core/src/test/java/org/bitcoinj/core/PeerTest.java
+++ b/core/src/test/java/org/bitcoinj/core/PeerTest.java
@@ -49,6 +49,7 @@ import java.util.Collection;
 import java.util.List;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
+import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 
@@ -94,7 +95,7 @@ public class PeerTest extends TestWithNetworkConnections {
     }
 
     private void connect() throws Exception {
-        connectWithVersion(70001, VersionMessage.NODE_NETWORK);
+        connectWithVersion(70001, VersionMessage.NODE_NETWORK | VersionMessage.NODE_BITCOIN_CASH);
     }
 
     private void connectWithVersion(int version, int flags) throws Exception {
@@ -289,7 +290,7 @@ public class PeerTest extends TestWithNetworkConnections {
         peer2.addWallet(wallet);
         VersionMessage peerVersion = new VersionMessage(PARAMS, OTHER_PEER_CHAIN_HEIGHT);
         peerVersion.clientVersion = 70001;
-        peerVersion.localServices = VersionMessage.NODE_NETWORK;
+        peerVersion.localServices = VersionMessage.NODE_NETWORK | VersionMessage.NODE_BITCOIN_CASH;
 
         connect();
         InboundMessageQueuer writeTarget2 = connect(peer2, peerVersion);
@@ -705,7 +706,7 @@ public class PeerTest extends TestWithNetworkConnections {
 
     @Test
     public void timeLockedTransactionNew() throws Exception {
-        connectWithVersion(70001, VersionMessage.NODE_NETWORK);
+        connectWithVersion(70001, VersionMessage.NODE_NETWORK | VersionMessage.NODE_BITCOIN_CASH);
         // Test that if we receive a relevant transaction that has a lock time, it doesn't result in a notification
         // until we explicitly opt in to seeing those.
         Wallet wallet = new Wallet(PARAMS);
@@ -758,7 +759,7 @@ public class PeerTest extends TestWithNetworkConnections {
 
     private void checkTimeLockedDependency(boolean shouldAccept) throws Exception {
         // Initial setup.
-        connectWithVersion(70001, VersionMessage.NODE_NETWORK);
+        connectWithVersion(70001, VersionMessage.NODE_NETWORK | VersionMessage.NODE_BITCOIN_CASH);
         Wallet wallet = new Wallet(PARAMS);
         ECKey key = wallet.freshReceiveKey();
         wallet.setAcceptRiskyTransactions(shouldAccept);
@@ -829,7 +830,7 @@ public class PeerTest extends TestWithNetworkConnections {
                 disconnectedFuture.set(null);
             }
         });
-        connectWithVersion(500, VersionMessage.NODE_NETWORK);
+        connectWithVersion(500, VersionMessage.NODE_NETWORK | VersionMessage.NODE_BITCOIN_CASH);
         // We must wait uninterruptibly here because connect[WithVersion] generates a peer that interrupts the current
         // thread when it disconnects.
         Uninterruptibles.getUninterruptibly(connectedFuture);
@@ -888,7 +889,7 @@ public class PeerTest extends TestWithNetworkConnections {
     public void getUTXOs() throws Exception {
         // Basic test of support for BIP 64: getutxos support. The Lighthouse unit tests exercise this stuff more
         // thoroughly.
-        connectWithVersion(GetUTXOsMessage.MIN_PROTOCOL_VERSION, VersionMessage.NODE_NETWORK | VersionMessage.NODE_GETUTXOS);
+        connectWithVersion(GetUTXOsMessage.MIN_PROTOCOL_VERSION, VersionMessage.NODE_NETWORK | VersionMessage.NODE_GETUTXOS | VersionMessage.NODE_BITCOIN_CASH);
         TransactionOutPoint op1 = new TransactionOutPoint(PARAMS, 1, Sha256Hash.of("foo".getBytes()));
         TransactionOutPoint op2 = new TransactionOutPoint(PARAMS, 2, Sha256Hash.of("bar".getBytes()));
 
@@ -956,7 +957,7 @@ public class PeerTest extends TestWithNetworkConnections {
         }.bitcoinSerialize(), out);
         writeTarget.writeTarget.writeBytes(out.toByteArray());
         try {
-            result.get();
+            result.get(1, TimeUnit.SECONDS);
             fail();
         } catch (ExecutionException e) {
             assertTrue(e.getCause() instanceof ProtocolException);

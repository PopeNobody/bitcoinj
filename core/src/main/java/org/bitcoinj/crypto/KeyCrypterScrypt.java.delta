diff --git a/core/src/main/java/org/bitcoinj/crypto/KeyCrypterScrypt.java b/core/src/main/java/org/bitcoinj/crypto/KeyCrypterScrypt.java
index 6d4f72110..1443e3a5c 100644
--- a/core/src/main/java/org/bitcoinj/crypto/KeyCrypterScrypt.java
+++ b/core/src/main/java/org/bitcoinj/crypto/KeyCrypterScrypt.java
@@ -18,6 +18,7 @@
 package org.bitcoinj.crypto;
 
 import com.google.common.base.Objects;
+import com.google.common.base.Stopwatch;
 import com.google.protobuf.ByteString;
 import com.lambdaworks.crypto.SCrypt;
 import org.bitcoinj.core.Utils;
@@ -102,8 +103,8 @@ public class KeyCrypterScrypt implements KeyCrypter {
     }
 
     /**
-     * Encryption/Decryption using custom number of iterations parameters and a random salt. A useful value for mobile
-     * devices is 512 (~500 ms).
+     * Encryption/Decryption using custom number of iterations parameters and a random salt.
+     * As of August 2016, a useful value for mobile devices is 4096 (derivation takes about 1 second).
      *
      * @param iterations
      *            number of scrypt iterations
@@ -154,7 +155,10 @@ public class KeyCrypterScrypt implements KeyCrypter {
                 log.warn("You are using a ScryptParameters with no salt. Your encryption may be vulnerable to a dictionary attack.");
             }
 
+            final Stopwatch watch = Stopwatch.createStarted();
             byte[] keyBytes = SCrypt.scrypt(passwordBytes, salt, (int) scryptParameters.getN(), scryptParameters.getR(), scryptParameters.getP(), KEY_LENGTH);
+            watch.stop();
+            log.info("Deriving key took {} for {} scrypt iterations.", watch, scryptParameters.getN());
             return new KeyParameter(keyBytes);
         } catch (Exception e) {
             throw new KeyCrypterException("Could not generate key from password and salt.", e);
@@ -257,7 +261,7 @@ public class KeyCrypterScrypt implements KeyCrypter {
 
     @Override
     public String toString() {
-        return "Scrypt/AES";
+        return "AES-" + KEY_LENGTH * 8 + "-CBC, Scrypt (N: " + scryptParameters.getN() + ")";
     }
 
     @Override

diff --git a/core/src/main/java/org/bitcoinj/protocols/channels/PaymentChannelServerState.java b/core/src/main/java/org/bitcoinj/protocols/channels/PaymentChannelServerState.java
index a5c9a7854..c171b1b4c 100644
--- a/core/src/main/java/org/bitcoinj/protocols/channels/PaymentChannelServerState.java
+++ b/core/src/main/java/org/bitcoinj/protocols/channels/PaymentChannelServerState.java
@@ -226,7 +226,7 @@ public abstract class PaymentChannelServerState {
     }
 
     /**
-     * Called when the client provides us with a new signature and wishes to increment total payment by size.		+
+     * Called when the client provides us with a new signature and wishes to increment total payment by size.
      * Verifies the provided signature and only updates values if everything checks out.
      * If the new refundSize is not the lowest we have seen, it is simply ignored.
      *
@@ -282,7 +282,9 @@ public abstract class PaymentChannelServerState {
         // Now check the signature is correct.
         // Note that the client must sign with SIGHASH_{SINGLE/NONE} | SIGHASH_ANYONECANPAY to allow us to add additional
         // inputs (in case we need to add significant fee, or something...) and any outputs we want to pay to.
-        Sha256Hash sighash = req.tx.hashForSignature(0, getSignedScript(), mode, true);
+        Sha256Hash sighash = req.tx.getVersion() >= Transaction.FORKID_VERSION ?
+                req.tx.hashForSignatureWitness(0, getSignedScript(), req.tx.getInput(0).getConnectedOutput().getValue(), mode, true):
+                req.tx.hashForSignature(0, getSignedScript(), mode, true);
 
         if (!getClientKey().verify(sighash, signature))
             throw new VerificationException("Signature does not verify on tx\n" + req.tx);
@@ -372,7 +374,7 @@ public abstract class PaymentChannelServerState {
     /**
      * Gets the script that signatures should sign against. This is never a P2SH
      * script, rather the script that would be inside a P2SH script.
-     * @return
+     * @return the {@link Script}
      */
     protected abstract Script getSignedScript();
 
